generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                       String            @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  email                    String            @unique
  password                 String
  skill                    String[] 
  role                     Role              @default(USER)
  taskCapacity             Int               @default(5)

  assignedTasks            Task[]            @relation("AssignedToTasks")
  createdTasks             Task[]            @relation("CreatedTasks")

  messageTrackersAsUser    MessageTracker[]  @relation("UserMessages")
  messageTrackersAsExpert  MessageTracker[]  @relation("ExpertMessages")

  messagesSent             Message[]         @relation("MessagesFrom")
  messagesReceived         Message[]         @relation("MessagesTo")

  @@map("users")
}

enum Role {
  USER
  EXPERT
  ADMIN
}

model Task {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  expertiseReq String[]  
  helpfullnote String?
  status       Status   @default(INPROGRESS)
  priority     Priority      @default(low)
  dueDate      DateTime @default(now())

  assignedTo   User?    @relation("AssignedToTasks", fields: [assignedToId], references: [id])
  assignedToId String?

  createdBy    User     @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById  String   @db.ObjectId

  messageTrackers MessageTracker[]

  @@map("tasks")
}

enum Priority{
   low
   medium
   high
}
enum Status {
  INPROGRESS
  COMPLETED
  EXTENDED
}

model MessageTracker {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId

  task       Task     @relation(fields: [taskId], references: [id])
  taskId     String   @db.ObjectId

  user       User     @relation("UserMessages", fields: [userId], references: [id])
  userId     String   @db.ObjectId

  expert     User     @relation("ExpertMessages", fields: [expertId], references: [id])
  expertId   String   @db.ObjectId

  chatActive Boolean  @default(false)

  messages   Message[]

  @@map("message_trackers")
}

model Message {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  content           String
  timestamp         DateTime         @default(now())

  from              User             @relation("MessagesFrom", fields: [fromId], references: [id])
  fromId            String           @db.ObjectId

  to                User             @relation("MessagesTo", fields: [toId], references: [id])
  toId              String           @db.ObjectId

  messageTracker    MessageTracker   @relation(fields: [messageTrackerId], references: [id])
  messageTrackerId  String           @db.ObjectId

  @@map("messages")
}
